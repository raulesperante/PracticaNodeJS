Para ejecutar un programa de consola en node
node miscript.js

Para crear un proyecto en node

node init
Y completar los datos que va pidiendo
Esto crea un package.json

La opción --save es para que se instale en mi proyecto actual

Express, un frame para trabajar con http, sistemas de rutas
Instalar express

npm install express --save

// Para recibir las peticiones en json
npm install body-parser --save 

// Subir archivos a mi backend
npm install connect-multiparty --save 

// Mongoose es un orm para trabajar con mongodb
npm install mongoose --save

// nodemon, escucha los cambios en los fichero para recargar el servidor
// Es una dependencia solo de desarrollo
npm install nodemon --save-dev

// npm start lanza al nodemon con index.js
// Para eso se lo configura en el package.json así:
// La parte de "start"
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "nodemon index.js"
  },


  ==============================
  Pasos:
  1) Crear base de datos en mongo
  2) Crear conexion
  3) Crear un módulo, en este caso app para express y body parser
  Para el servidor express
  4) Crear el controllador
  5) Crear la ruta que vincule al controllador
  6) Actualizar app.js, cargar su archivo de rutas

  ==============================

Se recomienda crear un fichero de rutas por cada uno de los controladores

// CORS

El Intercambio de Recursos de Origen Cruzado (CORS) es un mecanismo
que utiliza cabeceras HTTP adicionales para permitir que un user agent
obtenga permiso para acceder a recursos seleccionados desde un servidor,
en un origen distinto (dominio) al que pertenece.
Un agente crea una petición HTTP de origen cruzado
cuando solicita un recurso desde un dominio distinto,
un protocolo o un puerto diferente al del documento que lo generó.

Un ejemplo de solicitud de origen cruzado: el código JavaScript frontend
de una aplicación web que es localizada en http://domain-a.com utiliza 
XMLHttpRequest para cargar el recurso http://api.domain-b.com/data.json.

Por razones de seguridad, los exploradores restringen 
las solicitudes HTTP de origen cruzado iniciadas dentro de un script.
Por ejemplo, XMLHttpRequest y la API Fetch siguen
la política de mismo-origen. Ésto significa que una
aplicación que utilice esas APIs XMLHttpRequest sólo puede hacer
solicitudes HTTP a su propio dominio,
a menos que se utilicen cabeceras CORS.













